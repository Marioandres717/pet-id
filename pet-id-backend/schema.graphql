schema {
  query: Query
  mutation: Mutation
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """
  The variable name to export this field as.
  """
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """
  Specify the store key.
  """
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "addresses"
"""
type addresses {
  city: String!
  country: String!
  id: Int!
  line_1: String!
  other_address_details: String
  phone: String
  province_or_state: String!

  """
  An object relationship
  """
  user: users!

  """
  An object relationship
  """
  userById: users
  userId: Int!
  zip_or_postcode: String!
}

"""
aggregated selection of "addresses"
"""
type addresses_aggregate {
  aggregate: addresses_aggregate_fields
  nodes: [addresses!]!
}

"""
aggregate fields of "addresses"
"""
type addresses_aggregate_fields {
  avg: addresses_avg_fields
  count(columns: [addresses_select_column!], distinct: Boolean): Int
  max: addresses_max_fields
  min: addresses_min_fields
  stddev: addresses_stddev_fields
  stddev_pop: addresses_stddev_pop_fields
  stddev_samp: addresses_stddev_samp_fields
  sum: addresses_sum_fields
  var_pop: addresses_var_pop_fields
  var_samp: addresses_var_samp_fields
  variance: addresses_variance_fields
}

"""
order by aggregate values of table "addresses"
"""
input addresses_aggregate_order_by {
  avg: addresses_avg_order_by
  count: order_by
  max: addresses_max_order_by
  min: addresses_min_order_by
  stddev: addresses_stddev_order_by
  stddev_pop: addresses_stddev_pop_order_by
  stddev_samp: addresses_stddev_samp_order_by
  sum: addresses_sum_order_by
  var_pop: addresses_var_pop_order_by
  var_samp: addresses_var_samp_order_by
  variance: addresses_variance_order_by
}

"""
input type for inserting array relation for remote table "addresses"
"""
input addresses_arr_rel_insert_input {
  data: [addresses_insert_input!]!
  on_conflict: addresses_on_conflict
}

"""
aggregate avg on columns
"""
type addresses_avg_fields {
  id: Float
  userId: Float
}

"""
order by avg() on columns of table "addresses"
"""
input addresses_avg_order_by {
  id: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "addresses". All fields are combined with a logical 'AND'.
"""
input addresses_bool_exp {
  _and: [addresses_bool_exp]
  _not: addresses_bool_exp
  _or: [addresses_bool_exp]
  city: String_comparison_exp
  country: String_comparison_exp
  id: Int_comparison_exp
  line_1: String_comparison_exp
  other_address_details: String_comparison_exp
  phone: String_comparison_exp
  province_or_state: String_comparison_exp
  user: users_bool_exp
  userById: users_bool_exp
  userId: Int_comparison_exp
  zip_or_postcode: String_comparison_exp
}

"""
unique or primary key constraints on table "addresses"
"""
enum addresses_constraint {
  """
  unique or primary key constraint
  """
  addresses_pkey

  """
  unique or primary key constraint
  """
  addresses_userId_key
}

"""
input type for incrementing integer column in table "addresses"
"""
input addresses_inc_input {
  id: Int
  userId: Int
}

"""
input type for inserting data into table "addresses"
"""
input addresses_insert_input {
  city: String
  country: String
  id: Int
  line_1: String
  other_address_details: String
  phone: String
  province_or_state: String
  user: users_obj_rel_insert_input
  userById: users_obj_rel_insert_input
  userId: Int
  zip_or_postcode: String
}

"""
aggregate max on columns
"""
type addresses_max_fields {
  city: String
  country: String
  id: Int
  line_1: String
  other_address_details: String
  phone: String
  province_or_state: String
  userId: Int
  zip_or_postcode: String
}

"""
order by max() on columns of table "addresses"
"""
input addresses_max_order_by {
  city: order_by
  country: order_by
  id: order_by
  line_1: order_by
  other_address_details: order_by
  phone: order_by
  province_or_state: order_by
  userId: order_by
  zip_or_postcode: order_by
}

"""
aggregate min on columns
"""
type addresses_min_fields {
  city: String
  country: String
  id: Int
  line_1: String
  other_address_details: String
  phone: String
  province_or_state: String
  userId: Int
  zip_or_postcode: String
}

"""
order by min() on columns of table "addresses"
"""
input addresses_min_order_by {
  city: order_by
  country: order_by
  id: order_by
  line_1: order_by
  other_address_details: order_by
  phone: order_by
  province_or_state: order_by
  userId: order_by
  zip_or_postcode: order_by
}

"""
response of any mutation on the table "addresses"
"""
type addresses_mutation_response {
  """
  number of affected rows by the mutation
  """
  affected_rows: Int!

  """
  data of the affected rows by the mutation
  """
  returning: [addresses!]!
}

"""
input type for inserting object relation for remote table "addresses"
"""
input addresses_obj_rel_insert_input {
  data: addresses_insert_input!
  on_conflict: addresses_on_conflict
}

"""
on conflict condition type for table "addresses"
"""
input addresses_on_conflict {
  constraint: addresses_constraint!
  update_columns: [addresses_update_column!]!
  where: addresses_bool_exp
}

"""
ordering options when selecting data from "addresses"
"""
input addresses_order_by {
  city: order_by
  country: order_by
  id: order_by
  line_1: order_by
  other_address_details: order_by
  phone: order_by
  province_or_state: order_by
  user: users_order_by
  userById: users_order_by
  userId: order_by
  zip_or_postcode: order_by
}

"""
primary key columns input for table: "addresses"
"""
input addresses_pk_columns_input {
  id: Int!
}

"""
select columns of table "addresses"
"""
enum addresses_select_column {
  """
  column name
  """
  city

  """
  column name
  """
  country

  """
  column name
  """
  id

  """
  column name
  """
  line_1

  """
  column name
  """
  other_address_details

  """
  column name
  """
  phone

  """
  column name
  """
  province_or_state

  """
  column name
  """
  userId

  """
  column name
  """
  zip_or_postcode
}

"""
input type for updating data in table "addresses"
"""
input addresses_set_input {
  city: String
  country: String
  id: Int
  line_1: String
  other_address_details: String
  phone: String
  province_or_state: String
  userId: Int
  zip_or_postcode: String
}

"""
aggregate stddev on columns
"""
type addresses_stddev_fields {
  id: Float
  userId: Float
}

"""
order by stddev() on columns of table "addresses"
"""
input addresses_stddev_order_by {
  id: order_by
  userId: order_by
}

"""
aggregate stddev_pop on columns
"""
type addresses_stddev_pop_fields {
  id: Float
  userId: Float
}

"""
order by stddev_pop() on columns of table "addresses"
"""
input addresses_stddev_pop_order_by {
  id: order_by
  userId: order_by
}

"""
aggregate stddev_samp on columns
"""
type addresses_stddev_samp_fields {
  id: Float
  userId: Float
}

"""
order by stddev_samp() on columns of table "addresses"
"""
input addresses_stddev_samp_order_by {
  id: order_by
  userId: order_by
}

"""
aggregate sum on columns
"""
type addresses_sum_fields {
  id: Int
  userId: Int
}

"""
order by sum() on columns of table "addresses"
"""
input addresses_sum_order_by {
  id: order_by
  userId: order_by
}

"""
update columns of table "addresses"
"""
enum addresses_update_column {
  """
  column name
  """
  city

  """
  column name
  """
  country

  """
  column name
  """
  id

  """
  column name
  """
  line_1

  """
  column name
  """
  other_address_details

  """
  column name
  """
  phone

  """
  column name
  """
  province_or_state

  """
  column name
  """
  userId

  """
  column name
  """
  zip_or_postcode
}

"""
aggregate var_pop on columns
"""
type addresses_var_pop_fields {
  id: Float
  userId: Float
}

"""
order by var_pop() on columns of table "addresses"
"""
input addresses_var_pop_order_by {
  id: order_by
  userId: order_by
}

"""
aggregate var_samp on columns
"""
type addresses_var_samp_fields {
  id: Float
  userId: Float
}

"""
order by var_samp() on columns of table "addresses"
"""
input addresses_var_samp_order_by {
  id: order_by
  userId: order_by
}

"""
aggregate variance on columns
"""
type addresses_variance_fields {
  id: Float
  userId: Float
}

"""
order by variance() on columns of table "addresses"
"""
input addresses_variance_order_by {
  id: order_by
  userId: order_by
}

"""
columns and relationships of "images"
"""
type images {
  id: Int!
  large_image_url: String

  """
  An array relationship
  """
  pets(
    """
    distinct select on columns
    """
    distinct_on: [pets_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pets_order_by!]

    """
    filter the rows returned
    """
    where: pets_bool_exp
  ): [pets!]!

  """
  An aggregated array relationship
  """
  pets_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [pets_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pets_order_by!]

    """
    filter the rows returned
    """
    where: pets_bool_exp
  ): pets_aggregate!
  url: String!

  """
  An array relationship
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  An aggregated array relationship
  """
  users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): users_aggregate!
}

"""
aggregated selection of "images"
"""
type images_aggregate {
  aggregate: images_aggregate_fields
  nodes: [images!]!
}

"""
aggregate fields of "images"
"""
type images_aggregate_fields {
  avg: images_avg_fields
  count(columns: [images_select_column!], distinct: Boolean): Int
  max: images_max_fields
  min: images_min_fields
  stddev: images_stddev_fields
  stddev_pop: images_stddev_pop_fields
  stddev_samp: images_stddev_samp_fields
  sum: images_sum_fields
  var_pop: images_var_pop_fields
  var_samp: images_var_samp_fields
  variance: images_variance_fields
}

"""
order by aggregate values of table "images"
"""
input images_aggregate_order_by {
  avg: images_avg_order_by
  count: order_by
  max: images_max_order_by
  min: images_min_order_by
  stddev: images_stddev_order_by
  stddev_pop: images_stddev_pop_order_by
  stddev_samp: images_stddev_samp_order_by
  sum: images_sum_order_by
  var_pop: images_var_pop_order_by
  var_samp: images_var_samp_order_by
  variance: images_variance_order_by
}

"""
input type for inserting array relation for remote table "images"
"""
input images_arr_rel_insert_input {
  data: [images_insert_input!]!
  on_conflict: images_on_conflict
}

"""
aggregate avg on columns
"""
type images_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "images"
"""
input images_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "images". All fields are combined with a logical 'AND'.
"""
input images_bool_exp {
  _and: [images_bool_exp]
  _not: images_bool_exp
  _or: [images_bool_exp]
  id: Int_comparison_exp
  large_image_url: String_comparison_exp
  pets: pets_bool_exp
  url: String_comparison_exp
  users: users_bool_exp
}

"""
unique or primary key constraints on table "images"
"""
enum images_constraint {
  """
  unique or primary key constraint
  """
  images_pkey
}

"""
input type for incrementing integer column in table "images"
"""
input images_inc_input {
  id: Int
}

"""
input type for inserting data into table "images"
"""
input images_insert_input {
  id: Int
  large_image_url: String
  pets: pets_arr_rel_insert_input
  url: String
  users: users_arr_rel_insert_input
}

"""
aggregate max on columns
"""
type images_max_fields {
  id: Int
  large_image_url: String
  url: String
}

"""
order by max() on columns of table "images"
"""
input images_max_order_by {
  id: order_by
  large_image_url: order_by
  url: order_by
}

"""
aggregate min on columns
"""
type images_min_fields {
  id: Int
  large_image_url: String
  url: String
}

"""
order by min() on columns of table "images"
"""
input images_min_order_by {
  id: order_by
  large_image_url: order_by
  url: order_by
}

"""
response of any mutation on the table "images"
"""
type images_mutation_response {
  """
  number of affected rows by the mutation
  """
  affected_rows: Int!

  """
  data of the affected rows by the mutation
  """
  returning: [images!]!
}

"""
input type for inserting object relation for remote table "images"
"""
input images_obj_rel_insert_input {
  data: images_insert_input!
  on_conflict: images_on_conflict
}

"""
on conflict condition type for table "images"
"""
input images_on_conflict {
  constraint: images_constraint!
  update_columns: [images_update_column!]!
  where: images_bool_exp
}

"""
ordering options when selecting data from "images"
"""
input images_order_by {
  id: order_by
  large_image_url: order_by
  pets_aggregate: pets_aggregate_order_by
  url: order_by
  users_aggregate: users_aggregate_order_by
}

"""
primary key columns input for table: "images"
"""
input images_pk_columns_input {
  id: Int!
}

"""
select columns of table "images"
"""
enum images_select_column {
  """
  column name
  """
  id

  """
  column name
  """
  large_image_url

  """
  column name
  """
  url
}

"""
input type for updating data in table "images"
"""
input images_set_input {
  id: Int
  large_image_url: String
  url: String
}

"""
aggregate stddev on columns
"""
type images_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "images"
"""
input images_stddev_order_by {
  id: order_by
}

"""
aggregate stddev_pop on columns
"""
type images_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "images"
"""
input images_stddev_pop_order_by {
  id: order_by
}

"""
aggregate stddev_samp on columns
"""
type images_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "images"
"""
input images_stddev_samp_order_by {
  id: order_by
}

"""
aggregate sum on columns
"""
type images_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "images"
"""
input images_sum_order_by {
  id: order_by
}

"""
update columns of table "images"
"""
enum images_update_column {
  """
  column name
  """
  id

  """
  column name
  """
  large_image_url

  """
  column name
  """
  url
}

"""
aggregate var_pop on columns
"""
type images_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "images"
"""
input images_var_pop_order_by {
  id: order_by
}

"""
aggregate var_samp on columns
"""
type images_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "images"
"""
input images_var_samp_order_by {
  id: order_by
}

"""
aggregate variance on columns
"""
type images_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "images"
"""
input images_variance_order_by {
  id: order_by
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

scalar json

"""
expression to compare columns of type json. All fields are combined with logical 'AND'.
"""
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

"""
mutation root
"""
type Mutation {
  """
  delete data from the table: "addresses"
  """
  delete_addresses(
    """
    filter the rows which have to be deleted
    """
    where: addresses_bool_exp!
  ): addresses_mutation_response

  """
  delete single row from the table: "addresses"
  """
  delete_addresses_by_pk(id: Int!): addresses

  """
  delete data from the table: "images"
  """
  delete_images(
    """
    filter the rows which have to be deleted
    """
    where: images_bool_exp!
  ): images_mutation_response

  """
  delete single row from the table: "images"
  """
  delete_images_by_pk(id: Int!): images

  """
  delete data from the table: "pet_species"
  """
  delete_pet_species(
    """
    filter the rows which have to be deleted
    """
    where: pet_species_bool_exp!
  ): pet_species_mutation_response

  """
  delete single row from the table: "pet_species"
  """
  delete_pet_species_by_pk(id: Int!): pet_species

  """
  delete data from the table: "pets"
  """
  delete_pets(
    """
    filter the rows which have to be deleted
    """
    where: pets_bool_exp!
  ): pets_mutation_response

  """
  delete single row from the table: "pets"
  """
  delete_pets_by_pk(id: Int!): pets

  """
  delete data from the table: "user_browsers"
  """
  delete_user_browsers(
    """
    filter the rows which have to be deleted
    """
    where: user_browsers_bool_exp!
  ): user_browsers_mutation_response

  """
  delete single row from the table: "user_browsers"
  """
  delete_user_browsers_by_pk(id: Int!): user_browsers

  """
  delete data from the table: "user_pets"
  """
  delete_user_pets(
    """
    filter the rows which have to be deleted
    """
    where: user_pets_bool_exp!
  ): user_pets_mutation_response

  """
  delete single row from the table: "user_pets"
  """
  delete_user_pets_by_pk(id: Int!): user_pets

  """
  delete data from the table: "users"
  """
  delete_users(
    """
    filter the rows which have to be deleted
    """
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: Int!): users

  """
  insert data into the table: "addresses"
  """
  insert_addresses(
    """
    the rows to be inserted
    """
    objects: [addresses_insert_input!]!

    """
    on conflict condition
    """
    on_conflict: addresses_on_conflict
  ): addresses_mutation_response

  """
  insert a single row into the table: "addresses"
  """
  insert_addresses_one(
    """
    the row to be inserted
    """
    object: addresses_insert_input!

    """
    on conflict condition
    """
    on_conflict: addresses_on_conflict
  ): addresses

  """
  insert data into the table: "images"
  """
  insert_images(
    """
    the rows to be inserted
    """
    objects: [images_insert_input!]!

    """
    on conflict condition
    """
    on_conflict: images_on_conflict
  ): images_mutation_response

  """
  insert a single row into the table: "images"
  """
  insert_images_one(
    """
    the row to be inserted
    """
    object: images_insert_input!

    """
    on conflict condition
    """
    on_conflict: images_on_conflict
  ): images

  """
  insert data into the table: "pet_species"
  """
  insert_pet_species(
    """
    the rows to be inserted
    """
    objects: [pet_species_insert_input!]!

    """
    on conflict condition
    """
    on_conflict: pet_species_on_conflict
  ): pet_species_mutation_response

  """
  insert a single row into the table: "pet_species"
  """
  insert_pet_species_one(
    """
    the row to be inserted
    """
    object: pet_species_insert_input!

    """
    on conflict condition
    """
    on_conflict: pet_species_on_conflict
  ): pet_species

  """
  insert data into the table: "pets"
  """
  insert_pets(
    """
    the rows to be inserted
    """
    objects: [pets_insert_input!]!

    """
    on conflict condition
    """
    on_conflict: pets_on_conflict
  ): pets_mutation_response

  """
  insert a single row into the table: "pets"
  """
  insert_pets_one(
    """
    the row to be inserted
    """
    object: pets_insert_input!

    """
    on conflict condition
    """
    on_conflict: pets_on_conflict
  ): pets

  """
  insert data into the table: "user_browsers"
  """
  insert_user_browsers(
    """
    the rows to be inserted
    """
    objects: [user_browsers_insert_input!]!

    """
    on conflict condition
    """
    on_conflict: user_browsers_on_conflict
  ): user_browsers_mutation_response

  """
  insert a single row into the table: "user_browsers"
  """
  insert_user_browsers_one(
    """
    the row to be inserted
    """
    object: user_browsers_insert_input!

    """
    on conflict condition
    """
    on_conflict: user_browsers_on_conflict
  ): user_browsers

  """
  insert data into the table: "user_pets"
  """
  insert_user_pets(
    """
    the rows to be inserted
    """
    objects: [user_pets_insert_input!]!

    """
    on conflict condition
    """
    on_conflict: user_pets_on_conflict
  ): user_pets_mutation_response

  """
  insert a single row into the table: "user_pets"
  """
  insert_user_pets_one(
    """
    the row to be inserted
    """
    object: user_pets_insert_input!

    """
    on conflict condition
    """
    on_conflict: user_pets_on_conflict
  ): user_pets

  """
  insert data into the table: "users"
  """
  insert_users(
    """
    the rows to be inserted
    """
    objects: [users_insert_input!]!

    """
    on conflict condition
    """
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """
    the row to be inserted
    """
    object: users_insert_input!

    """
    on conflict condition
    """
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "addresses"
  """
  update_addresses(
    """
    increments the integer columns with given value of the filtered values
    """
    _inc: addresses_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: addresses_set_input

    """
    filter the rows which have to be updated
    """
    where: addresses_bool_exp!
  ): addresses_mutation_response

  """
  update single row of the table: "addresses"
  """
  update_addresses_by_pk(
    """
    increments the integer columns with given value of the filtered values
    """
    _inc: addresses_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: addresses_set_input
    pk_columns: addresses_pk_columns_input!
  ): addresses

  """
  update data of the table: "images"
  """
  update_images(
    """
    increments the integer columns with given value of the filtered values
    """
    _inc: images_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: images_set_input

    """
    filter the rows which have to be updated
    """
    where: images_bool_exp!
  ): images_mutation_response

  """
  update single row of the table: "images"
  """
  update_images_by_pk(
    """
    increments the integer columns with given value of the filtered values
    """
    _inc: images_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: images_set_input
    pk_columns: images_pk_columns_input!
  ): images

  """
  update data of the table: "pet_species"
  """
  update_pet_species(
    """
    increments the integer columns with given value of the filtered values
    """
    _inc: pet_species_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: pet_species_set_input

    """
    filter the rows which have to be updated
    """
    where: pet_species_bool_exp!
  ): pet_species_mutation_response

  """
  update single row of the table: "pet_species"
  """
  update_pet_species_by_pk(
    """
    increments the integer columns with given value of the filtered values
    """
    _inc: pet_species_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: pet_species_set_input
    pk_columns: pet_species_pk_columns_input!
  ): pet_species

  """
  update data of the table: "pets"
  """
  update_pets(
    """
    increments the integer columns with given value of the filtered values
    """
    _inc: pets_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: pets_set_input

    """
    filter the rows which have to be updated
    """
    where: pets_bool_exp!
  ): pets_mutation_response

  """
  update single row of the table: "pets"
  """
  update_pets_by_pk(
    """
    increments the integer columns with given value of the filtered values
    """
    _inc: pets_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: pets_set_input
    pk_columns: pets_pk_columns_input!
  ): pets

  """
  update data of the table: "user_browsers"
  """
  update_user_browsers(
    """
    increments the integer columns with given value of the filtered values
    """
    _inc: user_browsers_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: user_browsers_set_input

    """
    filter the rows which have to be updated
    """
    where: user_browsers_bool_exp!
  ): user_browsers_mutation_response

  """
  update single row of the table: "user_browsers"
  """
  update_user_browsers_by_pk(
    """
    increments the integer columns with given value of the filtered values
    """
    _inc: user_browsers_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: user_browsers_set_input
    pk_columns: user_browsers_pk_columns_input!
  ): user_browsers

  """
  update data of the table: "user_pets"
  """
  update_user_pets(
    """
    increments the integer columns with given value of the filtered values
    """
    _inc: user_pets_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: user_pets_set_input

    """
    filter the rows which have to be updated
    """
    where: user_pets_bool_exp!
  ): user_pets_mutation_response

  """
  update single row of the table: "user_pets"
  """
  update_user_pets_by_pk(
    """
    increments the integer columns with given value of the filtered values
    """
    _inc: user_pets_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: user_pets_set_input
    pk_columns: user_pets_pk_columns_input!
  ): user_pets

  """
  update data of the table: "users"
  """
  update_users(
    """
    increments the integer columns with given value of the filtered values
    """
    _inc: users_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: users_set_input

    """
    filter the rows which have to be updated
    """
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """
    increments the integer columns with given value of the filtered values
    """
    _inc: users_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

"""
column ordering options
"""
enum order_by {
  """
  in the ascending order, nulls last
  """
  asc

  """
  in the ascending order, nulls first
  """
  asc_nulls_first

  """
  in the ascending order, nulls last
  """
  asc_nulls_last

  """
  in the descending order, nulls first
  """
  desc

  """
  in the descending order, nulls first
  """
  desc_nulls_first

  """
  in the descending order, nulls last
  """
  desc_nulls_last
}

"""
columns and relationships of "pet_species"
"""
type pet_species {
  id: Int!

  """
  An array relationship
  """
  pets(
    """
    distinct select on columns
    """
    distinct_on: [pets_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pets_order_by!]

    """
    filter the rows returned
    """
    where: pets_bool_exp
  ): [pets!]!

  """
  An aggregated array relationship
  """
  pets_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [pets_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pets_order_by!]

    """
    filter the rows returned
    """
    where: pets_bool_exp
  ): pets_aggregate!
  type: String!
}

"""
aggregated selection of "pet_species"
"""
type pet_species_aggregate {
  aggregate: pet_species_aggregate_fields
  nodes: [pet_species!]!
}

"""
aggregate fields of "pet_species"
"""
type pet_species_aggregate_fields {
  avg: pet_species_avg_fields
  count(columns: [pet_species_select_column!], distinct: Boolean): Int
  max: pet_species_max_fields
  min: pet_species_min_fields
  stddev: pet_species_stddev_fields
  stddev_pop: pet_species_stddev_pop_fields
  stddev_samp: pet_species_stddev_samp_fields
  sum: pet_species_sum_fields
  var_pop: pet_species_var_pop_fields
  var_samp: pet_species_var_samp_fields
  variance: pet_species_variance_fields
}

"""
order by aggregate values of table "pet_species"
"""
input pet_species_aggregate_order_by {
  avg: pet_species_avg_order_by
  count: order_by
  max: pet_species_max_order_by
  min: pet_species_min_order_by
  stddev: pet_species_stddev_order_by
  stddev_pop: pet_species_stddev_pop_order_by
  stddev_samp: pet_species_stddev_samp_order_by
  sum: pet_species_sum_order_by
  var_pop: pet_species_var_pop_order_by
  var_samp: pet_species_var_samp_order_by
  variance: pet_species_variance_order_by
}

"""
input type for inserting array relation for remote table "pet_species"
"""
input pet_species_arr_rel_insert_input {
  data: [pet_species_insert_input!]!
  on_conflict: pet_species_on_conflict
}

"""
aggregate avg on columns
"""
type pet_species_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "pet_species"
"""
input pet_species_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "pet_species". All fields are combined with a logical 'AND'.
"""
input pet_species_bool_exp {
  _and: [pet_species_bool_exp]
  _not: pet_species_bool_exp
  _or: [pet_species_bool_exp]
  id: Int_comparison_exp
  pets: pets_bool_exp
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "pet_species"
"""
enum pet_species_constraint {
  """
  unique or primary key constraint
  """
  pet_species_pkey

  """
  unique or primary key constraint
  """
  pet_species_type_key
}

"""
input type for incrementing integer column in table "pet_species"
"""
input pet_species_inc_input {
  id: Int
}

"""
input type for inserting data into table "pet_species"
"""
input pet_species_insert_input {
  id: Int
  pets: pets_arr_rel_insert_input
  type: String
}

"""
aggregate max on columns
"""
type pet_species_max_fields {
  id: Int
  type: String
}

"""
order by max() on columns of table "pet_species"
"""
input pet_species_max_order_by {
  id: order_by
  type: order_by
}

"""
aggregate min on columns
"""
type pet_species_min_fields {
  id: Int
  type: String
}

"""
order by min() on columns of table "pet_species"
"""
input pet_species_min_order_by {
  id: order_by
  type: order_by
}

"""
response of any mutation on the table "pet_species"
"""
type pet_species_mutation_response {
  """
  number of affected rows by the mutation
  """
  affected_rows: Int!

  """
  data of the affected rows by the mutation
  """
  returning: [pet_species!]!
}

"""
input type for inserting object relation for remote table "pet_species"
"""
input pet_species_obj_rel_insert_input {
  data: pet_species_insert_input!
  on_conflict: pet_species_on_conflict
}

"""
on conflict condition type for table "pet_species"
"""
input pet_species_on_conflict {
  constraint: pet_species_constraint!
  update_columns: [pet_species_update_column!]!
  where: pet_species_bool_exp
}

"""
ordering options when selecting data from "pet_species"
"""
input pet_species_order_by {
  id: order_by
  pets_aggregate: pets_aggregate_order_by
  type: order_by
}

"""
primary key columns input for table: "pet_species"
"""
input pet_species_pk_columns_input {
  id: Int!
}

"""
select columns of table "pet_species"
"""
enum pet_species_select_column {
  """
  column name
  """
  id

  """
  column name
  """
  type
}

"""
input type for updating data in table "pet_species"
"""
input pet_species_set_input {
  id: Int
  type: String
}

"""
aggregate stddev on columns
"""
type pet_species_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "pet_species"
"""
input pet_species_stddev_order_by {
  id: order_by
}

"""
aggregate stddev_pop on columns
"""
type pet_species_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "pet_species"
"""
input pet_species_stddev_pop_order_by {
  id: order_by
}

"""
aggregate stddev_samp on columns
"""
type pet_species_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "pet_species"
"""
input pet_species_stddev_samp_order_by {
  id: order_by
}

"""
aggregate sum on columns
"""
type pet_species_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "pet_species"
"""
input pet_species_sum_order_by {
  id: order_by
}

"""
update columns of table "pet_species"
"""
enum pet_species_update_column {
  """
  column name
  """
  id

  """
  column name
  """
  type
}

"""
aggregate var_pop on columns
"""
type pet_species_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "pet_species"
"""
input pet_species_var_pop_order_by {
  id: order_by
}

"""
aggregate var_samp on columns
"""
type pet_species_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "pet_species"
"""
input pet_species_var_samp_order_by {
  id: order_by
}

"""
aggregate variance on columns
"""
type pet_species_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "pet_species"
"""
input pet_species_variance_order_by {
  id: order_by
}

"""
columns and relationships of "pets"
"""
type pets {
  """
  An object relationship
  """
  avatar: images
  avatarId: Int
  description: String
  id: Int!
  name: String!

  """
  An object relationship
  """
  pet_species: pet_species!
  species: Int!

  """
  An array relationship
  """
  user_pets(
    """
    distinct select on columns
    """
    distinct_on: [user_pets_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_pets_order_by!]

    """
    filter the rows returned
    """
    where: user_pets_bool_exp
  ): [user_pets!]!

  """
  An aggregated array relationship
  """
  user_pets_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_pets_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_pets_order_by!]

    """
    filter the rows returned
    """
    where: user_pets_bool_exp
  ): user_pets_aggregate!
  uuid: uuid!
}

"""
aggregated selection of "pets"
"""
type pets_aggregate {
  aggregate: pets_aggregate_fields
  nodes: [pets!]!
}

"""
aggregate fields of "pets"
"""
type pets_aggregate_fields {
  avg: pets_avg_fields
  count(columns: [pets_select_column!], distinct: Boolean): Int
  max: pets_max_fields
  min: pets_min_fields
  stddev: pets_stddev_fields
  stddev_pop: pets_stddev_pop_fields
  stddev_samp: pets_stddev_samp_fields
  sum: pets_sum_fields
  var_pop: pets_var_pop_fields
  var_samp: pets_var_samp_fields
  variance: pets_variance_fields
}

"""
order by aggregate values of table "pets"
"""
input pets_aggregate_order_by {
  avg: pets_avg_order_by
  count: order_by
  max: pets_max_order_by
  min: pets_min_order_by
  stddev: pets_stddev_order_by
  stddev_pop: pets_stddev_pop_order_by
  stddev_samp: pets_stddev_samp_order_by
  sum: pets_sum_order_by
  var_pop: pets_var_pop_order_by
  var_samp: pets_var_samp_order_by
  variance: pets_variance_order_by
}

"""
input type for inserting array relation for remote table "pets"
"""
input pets_arr_rel_insert_input {
  data: [pets_insert_input!]!
  on_conflict: pets_on_conflict
}

"""
aggregate avg on columns
"""
type pets_avg_fields {
  avatarId: Float
  id: Float
  species: Float
}

"""
order by avg() on columns of table "pets"
"""
input pets_avg_order_by {
  avatarId: order_by
  id: order_by
  species: order_by
}

"""
Boolean expression to filter rows from the table "pets". All fields are combined with a logical 'AND'.
"""
input pets_bool_exp {
  _and: [pets_bool_exp]
  _not: pets_bool_exp
  _or: [pets_bool_exp]
  avatar: images_bool_exp
  avatarId: Int_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  pet_species: pet_species_bool_exp
  species: Int_comparison_exp
  user_pets: user_pets_bool_exp
  uuid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "pets"
"""
enum pets_constraint {
  """
  unique or primary key constraint
  """
  pets_id_key

  """
  unique or primary key constraint
  """
  pets_pkey
}

"""
input type for incrementing integer column in table "pets"
"""
input pets_inc_input {
  avatarId: Int
  id: Int
  species: Int
}

"""
input type for inserting data into table "pets"
"""
input pets_insert_input {
  avatar: images_obj_rel_insert_input
  avatarId: Int
  description: String
  id: Int
  name: String
  pet_species: pet_species_obj_rel_insert_input
  species: Int
  user_pets: user_pets_arr_rel_insert_input
  uuid: uuid
}

"""
aggregate max on columns
"""
type pets_max_fields {
  avatarId: Int
  description: String
  id: Int
  name: String
  species: Int
  uuid: uuid
}

"""
order by max() on columns of table "pets"
"""
input pets_max_order_by {
  avatarId: order_by
  description: order_by
  id: order_by
  name: order_by
  species: order_by
  uuid: order_by
}

"""
aggregate min on columns
"""
type pets_min_fields {
  avatarId: Int
  description: String
  id: Int
  name: String
  species: Int
  uuid: uuid
}

"""
order by min() on columns of table "pets"
"""
input pets_min_order_by {
  avatarId: order_by
  description: order_by
  id: order_by
  name: order_by
  species: order_by
  uuid: order_by
}

"""
response of any mutation on the table "pets"
"""
type pets_mutation_response {
  """
  number of affected rows by the mutation
  """
  affected_rows: Int!

  """
  data of the affected rows by the mutation
  """
  returning: [pets!]!
}

"""
input type for inserting object relation for remote table "pets"
"""
input pets_obj_rel_insert_input {
  data: pets_insert_input!
  on_conflict: pets_on_conflict
}

"""
on conflict condition type for table "pets"
"""
input pets_on_conflict {
  constraint: pets_constraint!
  update_columns: [pets_update_column!]!
  where: pets_bool_exp
}

"""
ordering options when selecting data from "pets"
"""
input pets_order_by {
  avatar: images_order_by
  avatarId: order_by
  description: order_by
  id: order_by
  name: order_by
  pet_species: pet_species_order_by
  species: order_by
  user_pets_aggregate: user_pets_aggregate_order_by
  uuid: order_by
}

"""
primary key columns input for table: "pets"
"""
input pets_pk_columns_input {
  id: Int!
}

"""
select columns of table "pets"
"""
enum pets_select_column {
  """
  column name
  """
  avatarId

  """
  column name
  """
  description

  """
  column name
  """
  id

  """
  column name
  """
  name

  """
  column name
  """
  species

  """
  column name
  """
  uuid
}

"""
input type for updating data in table "pets"
"""
input pets_set_input {
  avatarId: Int
  description: String
  id: Int
  name: String
  species: Int
  uuid: uuid
}

"""
aggregate stddev on columns
"""
type pets_stddev_fields {
  avatarId: Float
  id: Float
  species: Float
}

"""
order by stddev() on columns of table "pets"
"""
input pets_stddev_order_by {
  avatarId: order_by
  id: order_by
  species: order_by
}

"""
aggregate stddev_pop on columns
"""
type pets_stddev_pop_fields {
  avatarId: Float
  id: Float
  species: Float
}

"""
order by stddev_pop() on columns of table "pets"
"""
input pets_stddev_pop_order_by {
  avatarId: order_by
  id: order_by
  species: order_by
}

"""
aggregate stddev_samp on columns
"""
type pets_stddev_samp_fields {
  avatarId: Float
  id: Float
  species: Float
}

"""
order by stddev_samp() on columns of table "pets"
"""
input pets_stddev_samp_order_by {
  avatarId: order_by
  id: order_by
  species: order_by
}

"""
aggregate sum on columns
"""
type pets_sum_fields {
  avatarId: Int
  id: Int
  species: Int
}

"""
order by sum() on columns of table "pets"
"""
input pets_sum_order_by {
  avatarId: order_by
  id: order_by
  species: order_by
}

"""
update columns of table "pets"
"""
enum pets_update_column {
  """
  column name
  """
  avatarId

  """
  column name
  """
  description

  """
  column name
  """
  id

  """
  column name
  """
  name

  """
  column name
  """
  species

  """
  column name
  """
  uuid
}

"""
aggregate var_pop on columns
"""
type pets_var_pop_fields {
  avatarId: Float
  id: Float
  species: Float
}

"""
order by var_pop() on columns of table "pets"
"""
input pets_var_pop_order_by {
  avatarId: order_by
  id: order_by
  species: order_by
}

"""
aggregate var_samp on columns
"""
type pets_var_samp_fields {
  avatarId: Float
  id: Float
  species: Float
}

"""
order by var_samp() on columns of table "pets"
"""
input pets_var_samp_order_by {
  avatarId: order_by
  id: order_by
  species: order_by
}

"""
aggregate variance on columns
"""
type pets_variance_fields {
  avatarId: Float
  id: Float
  species: Float
}

"""
order by variance() on columns of table "pets"
"""
input pets_variance_order_by {
  avatarId: order_by
  id: order_by
  species: order_by
}

"""
query root
"""
type Query {
  """
  fetch data from the table: "addresses"
  """
  addresses(
    """
    distinct select on columns
    """
    distinct_on: [addresses_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [addresses_order_by!]

    """
    filter the rows returned
    """
    where: addresses_bool_exp
  ): [addresses!]!

  """
  fetch aggregated fields from the table: "addresses"
  """
  addresses_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [addresses_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [addresses_order_by!]

    """
    filter the rows returned
    """
    where: addresses_bool_exp
  ): addresses_aggregate!

  """
  fetch data from the table: "addresses" using primary key columns
  """
  addresses_by_pk(id: Int!): addresses

  """
  fetch data from the table: "images"
  """
  images(
    """
    distinct select on columns
    """
    distinct_on: [images_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [images_order_by!]

    """
    filter the rows returned
    """
    where: images_bool_exp
  ): [images!]!

  """
  fetch aggregated fields from the table: "images"
  """
  images_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [images_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [images_order_by!]

    """
    filter the rows returned
    """
    where: images_bool_exp
  ): images_aggregate!

  """
  fetch data from the table: "images" using primary key columns
  """
  images_by_pk(id: Int!): images

  """
  fetch data from the table: "pet_species"
  """
  pet_species(
    """
    distinct select on columns
    """
    distinct_on: [pet_species_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pet_species_order_by!]

    """
    filter the rows returned
    """
    where: pet_species_bool_exp
  ): [pet_species!]!

  """
  fetch aggregated fields from the table: "pet_species"
  """
  pet_species_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [pet_species_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pet_species_order_by!]

    """
    filter the rows returned
    """
    where: pet_species_bool_exp
  ): pet_species_aggregate!

  """
  fetch data from the table: "pet_species" using primary key columns
  """
  pet_species_by_pk(id: Int!): pet_species

  """
  fetch data from the table: "pets"
  """
  pets(
    """
    distinct select on columns
    """
    distinct_on: [pets_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pets_order_by!]

    """
    filter the rows returned
    """
    where: pets_bool_exp
  ): [pets!]!

  """
  fetch aggregated fields from the table: "pets"
  """
  pets_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [pets_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pets_order_by!]

    """
    filter the rows returned
    """
    where: pets_bool_exp
  ): pets_aggregate!

  """
  fetch data from the table: "pets" using primary key columns
  """
  pets_by_pk(id: Int!): pets

  """
  fetch data from the table: "user_browsers"
  """
  user_browsers(
    """
    distinct select on columns
    """
    distinct_on: [user_browsers_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_browsers_order_by!]

    """
    filter the rows returned
    """
    where: user_browsers_bool_exp
  ): [user_browsers!]!

  """
  fetch aggregated fields from the table: "user_browsers"
  """
  user_browsers_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_browsers_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_browsers_order_by!]

    """
    filter the rows returned
    """
    where: user_browsers_bool_exp
  ): user_browsers_aggregate!

  """
  fetch data from the table: "user_browsers" using primary key columns
  """
  user_browsers_by_pk(id: Int!): user_browsers

  """
  fetch data from the table: "user_pets"
  """
  user_pets(
    """
    distinct select on columns
    """
    distinct_on: [user_pets_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_pets_order_by!]

    """
    filter the rows returned
    """
    where: user_pets_bool_exp
  ): [user_pets!]!

  """
  fetch aggregated fields from the table: "user_pets"
  """
  user_pets_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_pets_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_pets_order_by!]

    """
    filter the rows returned
    """
    where: user_pets_bool_exp
  ): user_pets_aggregate!

  """
  fetch data from the table: "user_pets" using primary key columns
  """
  user_pets_by_pk(id: Int!): user_pets

  """
  fetch data from the table: "users"
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): users_aggregate!

  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: Int!): users
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""
subscription root
"""
type subscription_root {
  """
  fetch data from the table: "addresses"
  """
  addresses(
    """
    distinct select on columns
    """
    distinct_on: [addresses_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [addresses_order_by!]

    """
    filter the rows returned
    """
    where: addresses_bool_exp
  ): [addresses!]!

  """
  fetch aggregated fields from the table: "addresses"
  """
  addresses_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [addresses_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [addresses_order_by!]

    """
    filter the rows returned
    """
    where: addresses_bool_exp
  ): addresses_aggregate!

  """
  fetch data from the table: "addresses" using primary key columns
  """
  addresses_by_pk(id: Int!): addresses

  """
  fetch data from the table: "images"
  """
  images(
    """
    distinct select on columns
    """
    distinct_on: [images_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [images_order_by!]

    """
    filter the rows returned
    """
    where: images_bool_exp
  ): [images!]!

  """
  fetch aggregated fields from the table: "images"
  """
  images_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [images_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [images_order_by!]

    """
    filter the rows returned
    """
    where: images_bool_exp
  ): images_aggregate!

  """
  fetch data from the table: "images" using primary key columns
  """
  images_by_pk(id: Int!): images

  """
  fetch data from the table: "pet_species"
  """
  pet_species(
    """
    distinct select on columns
    """
    distinct_on: [pet_species_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pet_species_order_by!]

    """
    filter the rows returned
    """
    where: pet_species_bool_exp
  ): [pet_species!]!

  """
  fetch aggregated fields from the table: "pet_species"
  """
  pet_species_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [pet_species_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pet_species_order_by!]

    """
    filter the rows returned
    """
    where: pet_species_bool_exp
  ): pet_species_aggregate!

  """
  fetch data from the table: "pet_species" using primary key columns
  """
  pet_species_by_pk(id: Int!): pet_species

  """
  fetch data from the table: "pets"
  """
  pets(
    """
    distinct select on columns
    """
    distinct_on: [pets_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pets_order_by!]

    """
    filter the rows returned
    """
    where: pets_bool_exp
  ): [pets!]!

  """
  fetch aggregated fields from the table: "pets"
  """
  pets_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [pets_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pets_order_by!]

    """
    filter the rows returned
    """
    where: pets_bool_exp
  ): pets_aggregate!

  """
  fetch data from the table: "pets" using primary key columns
  """
  pets_by_pk(id: Int!): pets

  """
  fetch data from the table: "user_browsers"
  """
  user_browsers(
    """
    distinct select on columns
    """
    distinct_on: [user_browsers_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_browsers_order_by!]

    """
    filter the rows returned
    """
    where: user_browsers_bool_exp
  ): [user_browsers!]!

  """
  fetch aggregated fields from the table: "user_browsers"
  """
  user_browsers_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_browsers_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_browsers_order_by!]

    """
    filter the rows returned
    """
    where: user_browsers_bool_exp
  ): user_browsers_aggregate!

  """
  fetch data from the table: "user_browsers" using primary key columns
  """
  user_browsers_by_pk(id: Int!): user_browsers

  """
  fetch data from the table: "user_pets"
  """
  user_pets(
    """
    distinct select on columns
    """
    distinct_on: [user_pets_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_pets_order_by!]

    """
    filter the rows returned
    """
    where: user_pets_bool_exp
  ): [user_pets!]!

  """
  fetch aggregated fields from the table: "user_pets"
  """
  user_pets_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_pets_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_pets_order_by!]

    """
    filter the rows returned
    """
    where: user_pets_bool_exp
  ): user_pets_aggregate!

  """
  fetch data from the table: "user_pets" using primary key columns
  """
  user_pets_by_pk(id: Int!): user_pets

  """
  fetch data from the table: "users"
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): users_aggregate!

  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: Int!): users
}

"""
columns and relationships of "user_browsers"
"""
type user_browsers {
  browser_subscription_object(
    """
    JSON select path
    """
    path: String
  ): json!
  id: Int!

  """
  An object relationship
  """
  user: users!
  user_id: Int!
}

"""
aggregated selection of "user_browsers"
"""
type user_browsers_aggregate {
  aggregate: user_browsers_aggregate_fields
  nodes: [user_browsers!]!
}

"""
aggregate fields of "user_browsers"
"""
type user_browsers_aggregate_fields {
  avg: user_browsers_avg_fields
  count(columns: [user_browsers_select_column!], distinct: Boolean): Int
  max: user_browsers_max_fields
  min: user_browsers_min_fields
  stddev: user_browsers_stddev_fields
  stddev_pop: user_browsers_stddev_pop_fields
  stddev_samp: user_browsers_stddev_samp_fields
  sum: user_browsers_sum_fields
  var_pop: user_browsers_var_pop_fields
  var_samp: user_browsers_var_samp_fields
  variance: user_browsers_variance_fields
}

"""
order by aggregate values of table "user_browsers"
"""
input user_browsers_aggregate_order_by {
  avg: user_browsers_avg_order_by
  count: order_by
  max: user_browsers_max_order_by
  min: user_browsers_min_order_by
  stddev: user_browsers_stddev_order_by
  stddev_pop: user_browsers_stddev_pop_order_by
  stddev_samp: user_browsers_stddev_samp_order_by
  sum: user_browsers_sum_order_by
  var_pop: user_browsers_var_pop_order_by
  var_samp: user_browsers_var_samp_order_by
  variance: user_browsers_variance_order_by
}

"""
input type for inserting array relation for remote table "user_browsers"
"""
input user_browsers_arr_rel_insert_input {
  data: [user_browsers_insert_input!]!
  on_conflict: user_browsers_on_conflict
}

"""
aggregate avg on columns
"""
type user_browsers_avg_fields {
  id: Float
  user_id: Float
}

"""
order by avg() on columns of table "user_browsers"
"""
input user_browsers_avg_order_by {
  id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "user_browsers". All fields are combined with a logical 'AND'.
"""
input user_browsers_bool_exp {
  _and: [user_browsers_bool_exp]
  _not: user_browsers_bool_exp
  _or: [user_browsers_bool_exp]
  browser_subscription_object: json_comparison_exp
  id: Int_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "user_browsers"
"""
enum user_browsers_constraint {
  """
  unique or primary key constraint
  """
  user_browsers_pkey

  """
  unique or primary key constraint
  """
  user_browsers_user_id_key
}

"""
input type for incrementing integer column in table "user_browsers"
"""
input user_browsers_inc_input {
  id: Int
  user_id: Int
}

"""
input type for inserting data into table "user_browsers"
"""
input user_browsers_insert_input {
  browser_subscription_object: json
  id: Int
  user: users_obj_rel_insert_input
  user_id: Int
}

"""
aggregate max on columns
"""
type user_browsers_max_fields {
  id: Int
  user_id: Int
}

"""
order by max() on columns of table "user_browsers"
"""
input user_browsers_max_order_by {
  id: order_by
  user_id: order_by
}

"""
aggregate min on columns
"""
type user_browsers_min_fields {
  id: Int
  user_id: Int
}

"""
order by min() on columns of table "user_browsers"
"""
input user_browsers_min_order_by {
  id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "user_browsers"
"""
type user_browsers_mutation_response {
  """
  number of affected rows by the mutation
  """
  affected_rows: Int!

  """
  data of the affected rows by the mutation
  """
  returning: [user_browsers!]!
}

"""
input type for inserting object relation for remote table "user_browsers"
"""
input user_browsers_obj_rel_insert_input {
  data: user_browsers_insert_input!
  on_conflict: user_browsers_on_conflict
}

"""
on conflict condition type for table "user_browsers"
"""
input user_browsers_on_conflict {
  constraint: user_browsers_constraint!
  update_columns: [user_browsers_update_column!]!
  where: user_browsers_bool_exp
}

"""
ordering options when selecting data from "user_browsers"
"""
input user_browsers_order_by {
  browser_subscription_object: order_by
  id: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: "user_browsers"
"""
input user_browsers_pk_columns_input {
  id: Int!
}

"""
select columns of table "user_browsers"
"""
enum user_browsers_select_column {
  """
  column name
  """
  browser_subscription_object

  """
  column name
  """
  id

  """
  column name
  """
  user_id
}

"""
input type for updating data in table "user_browsers"
"""
input user_browsers_set_input {
  browser_subscription_object: json
  id: Int
  user_id: Int
}

"""
aggregate stddev on columns
"""
type user_browsers_stddev_fields {
  id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "user_browsers"
"""
input user_browsers_stddev_order_by {
  id: order_by
  user_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type user_browsers_stddev_pop_fields {
  id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "user_browsers"
"""
input user_browsers_stddev_pop_order_by {
  id: order_by
  user_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type user_browsers_stddev_samp_fields {
  id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "user_browsers"
"""
input user_browsers_stddev_samp_order_by {
  id: order_by
  user_id: order_by
}

"""
aggregate sum on columns
"""
type user_browsers_sum_fields {
  id: Int
  user_id: Int
}

"""
order by sum() on columns of table "user_browsers"
"""
input user_browsers_sum_order_by {
  id: order_by
  user_id: order_by
}

"""
update columns of table "user_browsers"
"""
enum user_browsers_update_column {
  """
  column name
  """
  browser_subscription_object

  """
  column name
  """
  id

  """
  column name
  """
  user_id
}

"""
aggregate var_pop on columns
"""
type user_browsers_var_pop_fields {
  id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "user_browsers"
"""
input user_browsers_var_pop_order_by {
  id: order_by
  user_id: order_by
}

"""
aggregate var_samp on columns
"""
type user_browsers_var_samp_fields {
  id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "user_browsers"
"""
input user_browsers_var_samp_order_by {
  id: order_by
  user_id: order_by
}

"""
aggregate variance on columns
"""
type user_browsers_variance_fields {
  id: Float
  user_id: Float
}

"""
order by variance() on columns of table "user_browsers"
"""
input user_browsers_variance_order_by {
  id: order_by
  user_id: order_by
}

"""
columns and relationships of "user_pets"
"""
type user_pets {
  id: Int!

  """
  An object relationship
  """
  pet: pets!
  petId: Int!

  """
  An object relationship
  """
  user: users!
  userId: Int!
}

"""
aggregated selection of "user_pets"
"""
type user_pets_aggregate {
  aggregate: user_pets_aggregate_fields
  nodes: [user_pets!]!
}

"""
aggregate fields of "user_pets"
"""
type user_pets_aggregate_fields {
  avg: user_pets_avg_fields
  count(columns: [user_pets_select_column!], distinct: Boolean): Int
  max: user_pets_max_fields
  min: user_pets_min_fields
  stddev: user_pets_stddev_fields
  stddev_pop: user_pets_stddev_pop_fields
  stddev_samp: user_pets_stddev_samp_fields
  sum: user_pets_sum_fields
  var_pop: user_pets_var_pop_fields
  var_samp: user_pets_var_samp_fields
  variance: user_pets_variance_fields
}

"""
order by aggregate values of table "user_pets"
"""
input user_pets_aggregate_order_by {
  avg: user_pets_avg_order_by
  count: order_by
  max: user_pets_max_order_by
  min: user_pets_min_order_by
  stddev: user_pets_stddev_order_by
  stddev_pop: user_pets_stddev_pop_order_by
  stddev_samp: user_pets_stddev_samp_order_by
  sum: user_pets_sum_order_by
  var_pop: user_pets_var_pop_order_by
  var_samp: user_pets_var_samp_order_by
  variance: user_pets_variance_order_by
}

"""
input type for inserting array relation for remote table "user_pets"
"""
input user_pets_arr_rel_insert_input {
  data: [user_pets_insert_input!]!
  on_conflict: user_pets_on_conflict
}

"""
aggregate avg on columns
"""
type user_pets_avg_fields {
  id: Float
  petId: Float
  userId: Float
}

"""
order by avg() on columns of table "user_pets"
"""
input user_pets_avg_order_by {
  id: order_by
  petId: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "user_pets". All fields are combined with a logical 'AND'.
"""
input user_pets_bool_exp {
  _and: [user_pets_bool_exp]
  _not: user_pets_bool_exp
  _or: [user_pets_bool_exp]
  id: Int_comparison_exp
  pet: pets_bool_exp
  petId: Int_comparison_exp
  user: users_bool_exp
  userId: Int_comparison_exp
}

"""
unique or primary key constraints on table "user_pets"
"""
enum user_pets_constraint {
  """
  unique or primary key constraint
  """
  user_pets_pkey
}

"""
input type for incrementing integer column in table "user_pets"
"""
input user_pets_inc_input {
  id: Int
  petId: Int
  userId: Int
}

"""
input type for inserting data into table "user_pets"
"""
input user_pets_insert_input {
  id: Int
  pet: pets_obj_rel_insert_input
  petId: Int
  user: users_obj_rel_insert_input
  userId: Int
}

"""
aggregate max on columns
"""
type user_pets_max_fields {
  id: Int
  petId: Int
  userId: Int
}

"""
order by max() on columns of table "user_pets"
"""
input user_pets_max_order_by {
  id: order_by
  petId: order_by
  userId: order_by
}

"""
aggregate min on columns
"""
type user_pets_min_fields {
  id: Int
  petId: Int
  userId: Int
}

"""
order by min() on columns of table "user_pets"
"""
input user_pets_min_order_by {
  id: order_by
  petId: order_by
  userId: order_by
}

"""
response of any mutation on the table "user_pets"
"""
type user_pets_mutation_response {
  """
  number of affected rows by the mutation
  """
  affected_rows: Int!

  """
  data of the affected rows by the mutation
  """
  returning: [user_pets!]!
}

"""
input type for inserting object relation for remote table "user_pets"
"""
input user_pets_obj_rel_insert_input {
  data: user_pets_insert_input!
  on_conflict: user_pets_on_conflict
}

"""
on conflict condition type for table "user_pets"
"""
input user_pets_on_conflict {
  constraint: user_pets_constraint!
  update_columns: [user_pets_update_column!]!
  where: user_pets_bool_exp
}

"""
ordering options when selecting data from "user_pets"
"""
input user_pets_order_by {
  id: order_by
  pet: pets_order_by
  petId: order_by
  user: users_order_by
  userId: order_by
}

"""
primary key columns input for table: "user_pets"
"""
input user_pets_pk_columns_input {
  id: Int!
}

"""
select columns of table "user_pets"
"""
enum user_pets_select_column {
  """
  column name
  """
  id

  """
  column name
  """
  petId

  """
  column name
  """
  userId
}

"""
input type for updating data in table "user_pets"
"""
input user_pets_set_input {
  id: Int
  petId: Int
  userId: Int
}

"""
aggregate stddev on columns
"""
type user_pets_stddev_fields {
  id: Float
  petId: Float
  userId: Float
}

"""
order by stddev() on columns of table "user_pets"
"""
input user_pets_stddev_order_by {
  id: order_by
  petId: order_by
  userId: order_by
}

"""
aggregate stddev_pop on columns
"""
type user_pets_stddev_pop_fields {
  id: Float
  petId: Float
  userId: Float
}

"""
order by stddev_pop() on columns of table "user_pets"
"""
input user_pets_stddev_pop_order_by {
  id: order_by
  petId: order_by
  userId: order_by
}

"""
aggregate stddev_samp on columns
"""
type user_pets_stddev_samp_fields {
  id: Float
  petId: Float
  userId: Float
}

"""
order by stddev_samp() on columns of table "user_pets"
"""
input user_pets_stddev_samp_order_by {
  id: order_by
  petId: order_by
  userId: order_by
}

"""
aggregate sum on columns
"""
type user_pets_sum_fields {
  id: Int
  petId: Int
  userId: Int
}

"""
order by sum() on columns of table "user_pets"
"""
input user_pets_sum_order_by {
  id: order_by
  petId: order_by
  userId: order_by
}

"""
update columns of table "user_pets"
"""
enum user_pets_update_column {
  """
  column name
  """
  id

  """
  column name
  """
  petId

  """
  column name
  """
  userId
}

"""
aggregate var_pop on columns
"""
type user_pets_var_pop_fields {
  id: Float
  petId: Float
  userId: Float
}

"""
order by var_pop() on columns of table "user_pets"
"""
input user_pets_var_pop_order_by {
  id: order_by
  petId: order_by
  userId: order_by
}

"""
aggregate var_samp on columns
"""
type user_pets_var_samp_fields {
  id: Float
  petId: Float
  userId: Float
}

"""
order by var_samp() on columns of table "user_pets"
"""
input user_pets_var_samp_order_by {
  id: order_by
  petId: order_by
  userId: order_by
}

"""
aggregate variance on columns
"""
type user_pets_variance_fields {
  id: Float
  petId: Float
  userId: Float
}

"""
order by variance() on columns of table "user_pets"
"""
input user_pets_variance_order_by {
  id: order_by
  petId: order_by
  userId: order_by
}

"""
columns and relationships of "users"
"""
type users {
  """
  An object relationship
  """
  address: addresses
  addressId: Int
  authId: String!

  """
  An object relationship
  """
  avatar: images
  avatarId: Int
  email: String!
  id: Int!
  name: String!

  """
  An object relationship
  """
  user_browser: user_browsers

  """
  An array relationship
  """
  user_pets(
    """
    distinct select on columns
    """
    distinct_on: [user_pets_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_pets_order_by!]

    """
    filter the rows returned
    """
    where: user_pets_bool_exp
  ): [user_pets!]!

  """
  An aggregated array relationship
  """
  user_pets_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_pets_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_pets_order_by!]

    """
    filter the rows returned
    """
    where: user_pets_bool_exp
  ): user_pets_aggregate!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  avg: users_avg_fields
  count(columns: [users_select_column!], distinct: Boolean): Int
  max: users_max_fields
  min: users_min_fields
  stddev: users_stddev_fields
  stddev_pop: users_stddev_pop_fields
  stddev_samp: users_stddev_samp_fields
  sum: users_sum_fields
  var_pop: users_var_pop_fields
  var_samp: users_var_samp_fields
  variance: users_variance_fields
}

"""
order by aggregate values of table "users"
"""
input users_aggregate_order_by {
  avg: users_avg_order_by
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
  stddev: users_stddev_order_by
  stddev_pop: users_stddev_pop_order_by
  stddev_samp: users_stddev_samp_order_by
  sum: users_sum_order_by
  var_pop: users_var_pop_order_by
  var_samp: users_var_samp_order_by
  variance: users_variance_order_by
}

"""
input type for inserting array relation for remote table "users"
"""
input users_arr_rel_insert_input {
  data: [users_insert_input!]!
  on_conflict: users_on_conflict
}

"""
aggregate avg on columns
"""
type users_avg_fields {
  addressId: Float
  avatarId: Float
  id: Float
}

"""
order by avg() on columns of table "users"
"""
input users_avg_order_by {
  addressId: order_by
  avatarId: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp]
  _not: users_bool_exp
  _or: [users_bool_exp]
  address: addresses_bool_exp
  addressId: Int_comparison_exp
  authId: String_comparison_exp
  avatar: images_bool_exp
  avatarId: Int_comparison_exp
  email: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  user_browser: user_browsers_bool_exp
  user_pets: user_pets_bool_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """
  unique or primary key constraint
  """
  users_addressId_key

  """
  unique or primary key constraint
  """
  users_authId_key

  """
  unique or primary key constraint
  """
  users_email_key

  """
  unique or primary key constraint
  """
  users_id_key

  """
  unique or primary key constraint
  """
  users_pkey
}

"""
input type for incrementing integer column in table "users"
"""
input users_inc_input {
  addressId: Int
  avatarId: Int
  id: Int
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  address: addresses_obj_rel_insert_input
  addressId: Int
  authId: String
  avatar: images_obj_rel_insert_input
  avatarId: Int
  email: String
  id: Int
  name: String
  user_browser: user_browsers_obj_rel_insert_input
  user_pets: user_pets_arr_rel_insert_input
}

"""
aggregate max on columns
"""
type users_max_fields {
  addressId: Int
  authId: String
  avatarId: Int
  email: String
  id: Int
  name: String
}

"""
order by max() on columns of table "users"
"""
input users_max_order_by {
  addressId: order_by
  authId: order_by
  avatarId: order_by
  email: order_by
  id: order_by
  name: order_by
}

"""
aggregate min on columns
"""
type users_min_fields {
  addressId: Int
  authId: String
  avatarId: Int
  email: String
  id: Int
  name: String
}

"""
order by min() on columns of table "users"
"""
input users_min_order_by {
  addressId: order_by
  authId: order_by
  avatarId: order_by
  email: order_by
  id: order_by
  name: order_by
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """
  number of affected rows by the mutation
  """
  affected_rows: Int!

  """
  data of the affected rows by the mutation
  """
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!
  on_conflict: users_on_conflict
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]!
  where: users_bool_exp
}

"""
ordering options when selecting data from "users"
"""
input users_order_by {
  address: addresses_order_by
  addressId: order_by
  authId: order_by
  avatar: images_order_by
  avatarId: order_by
  email: order_by
  id: order_by
  name: order_by
  user_browser: user_browsers_order_by
  user_pets_aggregate: user_pets_aggregate_order_by
}

"""
primary key columns input for table: "users"
"""
input users_pk_columns_input {
  id: Int!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """
  column name
  """
  addressId

  """
  column name
  """
  authId

  """
  column name
  """
  avatarId

  """
  column name
  """
  email

  """
  column name
  """
  id

  """
  column name
  """
  name
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  addressId: Int
  authId: String
  avatarId: Int
  email: String
  id: Int
  name: String
}

"""
aggregate stddev on columns
"""
type users_stddev_fields {
  addressId: Float
  avatarId: Float
  id: Float
}

"""
order by stddev() on columns of table "users"
"""
input users_stddev_order_by {
  addressId: order_by
  avatarId: order_by
  id: order_by
}

"""
aggregate stddev_pop on columns
"""
type users_stddev_pop_fields {
  addressId: Float
  avatarId: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "users"
"""
input users_stddev_pop_order_by {
  addressId: order_by
  avatarId: order_by
  id: order_by
}

"""
aggregate stddev_samp on columns
"""
type users_stddev_samp_fields {
  addressId: Float
  avatarId: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "users"
"""
input users_stddev_samp_order_by {
  addressId: order_by
  avatarId: order_by
  id: order_by
}

"""
aggregate sum on columns
"""
type users_sum_fields {
  addressId: Int
  avatarId: Int
  id: Int
}

"""
order by sum() on columns of table "users"
"""
input users_sum_order_by {
  addressId: order_by
  avatarId: order_by
  id: order_by
}

"""
update columns of table "users"
"""
enum users_update_column {
  """
  column name
  """
  addressId

  """
  column name
  """
  authId

  """
  column name
  """
  avatarId

  """
  column name
  """
  email

  """
  column name
  """
  id

  """
  column name
  """
  name
}

"""
aggregate var_pop on columns
"""
type users_var_pop_fields {
  addressId: Float
  avatarId: Float
  id: Float
}

"""
order by var_pop() on columns of table "users"
"""
input users_var_pop_order_by {
  addressId: order_by
  avatarId: order_by
  id: order_by
}

"""
aggregate var_samp on columns
"""
type users_var_samp_fields {
  addressId: Float
  avatarId: Float
  id: Float
}

"""
order by var_samp() on columns of table "users"
"""
input users_var_samp_order_by {
  addressId: order_by
  avatarId: order_by
  id: order_by
}

"""
aggregate variance on columns
"""
type users_variance_fields {
  addressId: Float
  avatarId: Float
  id: Float
}

"""
order by variance() on columns of table "users"
"""
input users_variance_order_by {
  addressId: order_by
  avatarId: order_by
  id: order_by
}

scalar uuid

"""
expression to compare columns of type uuid. All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
